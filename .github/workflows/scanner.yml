name: Scanner

on:
  issues:
    types:
      - opened

jobs:
  scan:
    name: Scan container Images
    if: ${{ !github.event.repository.is_template }}
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_URL: ${{ github.event.issue.html_url }}
      ISSUE_BODY: ${{ github.event.issue.body }}
    
    steps:
      - name: Init
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          # Install trivy
          sudo apt-get install trivy  

      # TASK/TODO: 
      # Build this step in the workflow. Refer to the linked document in the README for more details
      - name: TODO - Scan Vulnerabilities
        run: echo "Build this step in the workflow. Refer to the linked document in the README for more details"
        
      - name: Script to return vulnerability result
        run: |
          result=()
          input=${{ github.event.issue.body }}
          image_list=$(echo $input | tr -d "[]")
          IFS="," read -a IMAGES <<< $image_list

          json_output() {
              if [ "$1" -eq 0 ]; then
                  echo "SAFE"
              else
                  echo "UNSAFE"
              fi
          }

          for image in ${IMAGES[@]}
          do
              echo $image
              value=$(trivy image --quiet $image | grep -i "Total" | awk '{print $2}')
              values=$(json_output $value)
              result+=("$values")
          done

          result=$(jq -n --arg names "${IMAGES[*]}" --arg value "${result[*]}" '{"name": ($names / " "), "title": ($value / " ")}')
          new_result=$(echo $result | jq '[.name, .title] | transpose | map( {image: .[0],status: .[1]})')
          replace=$(echo $new_result | sed "s/\"/'/g")
          latest_result=$(jq -n --arg names "$replace" '{"body": ($names)}')
          echo $latest_result > result.json
          cat result.json
          curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/amadinathaniel/cloud-starter/issues/${{ github.event.issue.number }}/comments -g -d @result.json